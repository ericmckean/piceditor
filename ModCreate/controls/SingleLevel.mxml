<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="200" xmlns:ctrl="controls.*" xmlns:imageUtils="imageUtils.*" xmlns:flash="flash.filters.*" xmlns:containers="containers.*">
	<mx:Number id="lineColor">0xcccccc</mx:Number>
	<mx:Number id="halfThumbWidth">5</mx:Number>
	<mx:Number id="canvasWidth">{width-2*halfThumbWidth}</mx:Number>
	<mx:Number id="contentsWidth">{canvasWidth-2}</mx:Number>
	<mx:Number id="histogramHeight">70</mx:Number>
	<imageUtils:ChannelMap id="channelMap"/>
	<imageUtils:MappedHistogram id="histogramOut"/>
	<mx:Metadata>
		[Event(name="change", type="flash.events.Event")]
		[Event(name="edited", type="flash.events.Event")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			public function Reset(): void {
				_sldrOut.Reset();
				_sldrIn.Reset();
				channelMap.Reset();
				_fInvalid = true;
				invalidateProperties();
			}
			
			protected function OnEdited(): void {
				dispatchEvent(new Event("edited"));
			}
			
			private var _fInvalid:Boolean = false;
			
			public function GetLevels(): Object {
				var obSettings:Object = {};
				obSettings.inMin = _sldrIn.leftVal;
				obSettings.inMax = _sldrIn.rightVal;
				obSettings.mid = _sldrIn.midVal;
				obSettings.outMin = _sldrOut.leftVal;
				obSettings.outMax = _sldrOut.rightVal;
				return obSettings;
			}
			
			public function SetLevels(obSettings:Object): void {
				_sldrIn.leftVal = obSettings.inMin;
				_sldrIn.rightVal = obSettings.inMax;
				_sldrIn.midVal = obSettings.mid;
				
				if ('outMin' in obSettings) _sldrOut.leftVal = obSettings.outMin;
				else _sldrOut.leftVal = 0;
				if ('outMax' in obSettings) _sldrOut.rightVal = obSettings.outMax;
				else _sldrOut.rightVal = 255;
				
				_fInvalid = true;
				invalidateProperties();
			}
			
			protected override function commitProperties():void {
				super.commitProperties();
				if (_fInvalid) {
					_fInvalid = true;
					channelMap.outMin = _sldrOut.leftVal;
					channelMap.outMax = _sldrOut.rightVal;
					histogramOut.apply(channelMap);
					channelMap.inMin = _sldrIn.leftVal;
					channelMap.inMax = _sldrIn.rightVal;
					channelMap.midPoint = _sldrIn.midVal;
					dispatchEvent(new Event("change"));
					_fInvalid = false;
				}
			}
			
			protected function OnOutSliderChange(): void {
				_fInvalid = true;
				invalidateProperties();
			}

			protected function OnInSliderChange(): void {
				_fInvalid = true;
				invalidateProperties();
			}
		]]>
	</mx:Script> 
	
	<flash:DropShadowFilter angle="90" blurX="2" blurY="2" distance="1" color="0x666666" alpha=".75" quality="3" inner="true" id="_inputShadow"/>
		
	<mx:VBox width="100%" verticalGap="0" paddingLeft="{-halfThumbWidth}" paddingBottom="-4" clipContent="false">
		<!-- gamma slider values -->
		<mx:HBox paddingLeft="{halfThumbWidth}">
			<mx:HBox width="190" height="17" horizontalGap="0" paddingLeft="2" borderSides="left,top,right"
					borderColor="#cccccc" borderStyle="solid" borderThickness="1" cornerRadius="5">
				<mx:Label text="{Math.round(_sldrIn.leftVal)}" textAlign="left" fontSize="12" color="#666666" width="33%"/>
				<mx:Label text="{Math.round(ChannelMap.midToGamma(_sldrIn.midVal)*100)/100}" textAlign="center" fontSize="12" color="#666666" width="33%" />
				<mx:Label text="{Math.round(_sldrIn.rightVal)}" textAlign="right" fontSize="12" color="#666666" width="33%"/>
			</mx:HBox>
		</mx:HBox>
		<mx:HBox paddingLeft="{halfThumbWidth}">
			<mx:Canvas id="_cnv" width="{canvasWidth}"
					 borderColor="#cccccc" borderThickness="1" borderStyle="solid"
					 backgroundColor="#ffffff">
				<ctrl:RGBLHistogramView id="_histView" lineColor="{lineColor}" width="{contentsWidth}" height="{histogramHeight}"/>
				<ctrl:ImageEx source="../graphics/levels/alphagradient.png" height="{histogramHeight}" scaleContent="true" maintainAspectRatio="false" width="{contentsWidth}" alpha="0.25"/>
			</mx:Canvas>
		</mx:HBox>
		<mx:Canvas>
			<ctrl:GammaThumbSlider id="_sldrIn" y="1" change="OnInSliderChange()" width="200" middleThumbSource="../graphics/levels/graythumb.png" rightThumbSource="../graphics/levels/whitethumb.png" leftThumbSource="../graphics/levels/blackthumb.png" edited="OnEdited()"/>
		</mx:Canvas>
		<mx:VBox paddingTop="5" verticalGap="-3">
			<mx:Label text="@Resource(key='output',bundle='LevelsEffect')" styleName="sliderTitle" paddingLeft="2"/>
			<mx:HBox paddingLeft="{halfThumbWidth}">
				<mx:Canvas borderColor="#cccccc" borderThickness="1" borderStyle="solid" width="{canvasWidth}">
					<ctrl:ImageEx source="../graphics/levels/gradient.png" height="16" scaleContent="true" maintainAspectRatio="false" width="{contentsWidth}"/>
					<mx:HBox width="100%" height="16" paddingLeft="2" paddingRight="2">
						<mx:Label text="{Math.round(_sldrOut.leftVal)}" textAlign="left" fontSize="12" color="#cccccc" width="50%"/>
						<mx:Label text="{Math.round(_sldrOut.rightVal)}" textAlign="right" fontSize="12" color="#333333" width="50%"/>
					</mx:HBox>
				</mx:Canvas>
			</mx:HBox>
		</mx:VBox>
		<mx:Canvas width="200">
			<ctrl:ThumbSlider id="_sldrOut" y="1" change="OnOutSliderChange()" width="200" rightThumbSource="../graphics/levels/whitethumb.png" leftThumbSource="../graphics/levels/blackthumb.png" edited="OnEdited()"/>
		</mx:Canvas>
	</mx:VBox>
</mx:Canvas>
