<?xml version="1.0" encoding="utf-8"?>
<eff:PaintOnEffectBase xmlns:eff="effects.*" xmlns:cnt="containers.*" xmlns="controls.*" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="269" _nBrushHardness="0"
	xmlns:local="*" xmlns:imageOperations="imagine.imageOperations.*" xmlns:flash.filters="flash.filters.*" urlid="FacePaint">
<mx:Script>
	<![CDATA[
		import util.BlendModeMath;
		import util.LocUtil;
		
		private static const kaobNormalCurve:Array = [{x:0, y:0}, {x:255, y:255}];
		private static const kaobWhiteCurve:Array = [{x:0, y:147}, {x:96, y:175}, {x:255, y:255}];
		private static const kaobBlackCurve:Array = [{x:0, y:0}, {x:203, y:87}, {x:255, y:255}];
		private static const kaobBlueCurve:Array = [{x:0, y:0}, {x:146, y:98}, {x:255, y:255}]; // Darken a bit
		
		private static const kaobColors:Array = [
			{color:0xff0000, curve:kaobNormalCurve, blendMode:BlendMode.MULTIPLY, alpha:1}, // red
			{color:0x72b4ff, curve:kaobBlueCurve, blendMode:BlendMode.NORMAL, alpha:1}, // blue
			{color:0x69ff24, curve:kaobNormalCurve, blendMode:BlendMode.MULTIPLY, alpha:1}, // green
			{color:0xfffc24, curve:kaobNormalCurve, blendMode:BlendMode.NORMAL, alpha:1}, // yellow
			{color:0xffffff, curve:kaobWhiteCurve, blendMode:BlendMode.NORMAL, alpha:.9}, // white
			{color:0x000000, curve:kaobBlackCurve, blendMode:BlendMode.NORMAL, alpha:.73}, // black
		];
		
		private static function GetPaletteColors(): Array {
			var an:Array = [];
			for each (var obColor:Object in kaobColors) {
				if ('paletteColor' in obColor)
					an.push(obColor.paletteColor);
				else
					an.push(obColor.color);
			}
			return an;
		}
		
		private static function GetCurve(iSelectedColor:Number): Array {
			return kaobColors[iSelectedColor].curve;
		}

		private static function GetBlendMode(iSelectedColor:Number): String {
			return kaobColors[iSelectedColor].blendMode;
		}

		private static function GetColor(iSelectedColor:Number): Number {
			return kaobColors[iSelectedColor].color;
		}

		private static function GetAlpha(iSelectedColor:Number): Number {
			return kaobColors[iSelectedColor].alpha;
		}
	]]>
</mx:Script>
	
	<EffectButton id="_efbtn" strTitle="@Resource(key='_efbtn', bundle='FacePaintEffect')" strAuthor="@Resource(key='byPicnik', bundle='EffectCanvas')"
		strImageSource="../graphics/effects/Halloween/facepaint.jpg" premium="{premium}"/>
	<mx:String id="_strHelpText">{Resource.getString('FacePaintEffect', '_strHelpText')}</mx:String>

	<mx:VBox x="10" y="73" verticalGap="0">
		<BlushColorPalette id="_clrsw" numSwatches="6" wet="true" 
				colors="{GetPaletteColors()}" change="OnOpChange()" 
				selected="{_fSelected}"/> 
    
    	<!-- brush size / eraser toggle -->
    	<BrushSizeAndEraserButton id="_brshbtn" selected="{_fSelected}" paddingTop="2"
    		imageWidth="{origImageWidth}" imageHeight="{origImageHeight}"
    		change="OnOpChange()" thumbPress="ShowBrushPreview()" thumbDrag="UpdateBrushPreview()" thumbRelease="HideBrushPreview()"
    		/>

		<!-- Fade label/percent/slider box -->
		<mx:HBox paddingBottom="-5" paddingTop="3" width="190">
			<mx:Label text="@Resource(key='fade', bundle='EffectCanvas')" styleName="sliderTitle"/>
			<mx:Label text="{LocUtil.pct((_sldrFade.value))}" styleName="sliderValue" textAlign="right" width="100%"/>
		</mx:HBox>
		<HSliderPlus width="190" minimum="0" maximum="100" value="{0 + zeroR}" id="_sldrFade" change="OnOpChange()" liveDragging="true" showDataTip="false"/>

		<ApplyCancelEffectButtons addBoxPadding="true" premium="{premium}"/>
	</mx:VBox>

	<mx:Number id="_cxyBrush">{_brshbtn.value}</mx:Number>
	<imageOperations:NestedImageOperation id="_op" BlendAlpha="{(1-_sldrFade.value/100) * GetAlpha(_clrsw.selectedColorIndex)}" Mask="{_mctr.mask}"
			dynamicAlphaCachePriority="5">
		<imageOperations:children>
			<imageOperations:TintImageOperation 
				BlendMode="{GetBlendMode(_clrsw.selectedColorIndex)}" Color="{GetColor(_clrsw.selectedColorIndex)}"
				dynamicParamsCachePriority="4"
				/>
			<imageOperations:AdjustCurvesImageOperation MasterCurve="{GetCurve(_clrsw.selectedColorIndex)}"/>
		</imageOperations:children>
		
	</imageOperations:NestedImageOperation>
</eff:PaintOnEffectBase>
