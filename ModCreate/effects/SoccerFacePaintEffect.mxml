<?xml version="1.0" encoding="utf-8"?>
<eff:PaintOnEffectBase xmlns:eff="effects.*" xmlns:cnt="containers.*" xmlns="controls.*" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="269" _nBrushHardness="0"
	xmlns:local="*" xmlns:imageOperations="imagine.imageOperations.*" xmlns:flash.filters="flash.filters.*"
	urlid="FacePaint">
<mx:Script>
	<![CDATA[
		import imagine.imageOperations.TintImageOperation;
		import imagine.imageOperations.SimpleColorMatrixImageOperation;
		import imagine.imageOperations.paintMask.OperationStrokes;
		import imagine.imageOperations.paintMask.PaintMaskController;
		import imagine.imageOperations.paintMask.OperationStroke;
		import imagine.imageOperations.PaletteMapImageOperation;
		import imagine.imageOperations.NestedImageOperation;
		import imagine.imageOperations.ISimpleOperation;
		import overlays.helpers.RGBColor;
		import imagine.imageOperations.GetVarImageOperation;
		import imagine.imageOperations.paintMask.PaintPlusImageMask;
		import util.BlendModeMath;
		import util.LocUtil;
		import imagine.imageOperations.FacePaintImageOperation;
		
		private var _strTeamId:String = "au";
		private var _opCurrent:FacePaintImageOperation;
		
		private static const kobTeamColors:Object = {
			// picnik
			pk: [{color:0x55bedf}, // blue
				{color:0x8bae4f}], // white
				
			// australia
			au: [{color:0x004044}, // green
				{color:0xffbe00}, // yellow
				{color:0x00003f}, // dark blue
				{color:0x0000ff}], // light blue
				
			// japan
			jp: [{color:0xff0000}, // red
				{color:0x000080}, // blue
				{color:0xffffff}], // white
				
			// korea dpr
			kp: [{color:0xDF2D21}, // red
				{color:0x392884}, // blue
				{color:0xffffff}], // white
				
			// korea republic
			kr: [{color:0xff0040}, // red
				{color:0x0e51a0}, // blue
				{color:0xffffff}], // white
				
			// algeria
			dz: [{color:0xff0000}, // red
				{color:0x009933}, // green
				{color:0xffffff}], // white
				
			// cameroon
			cm: [{color:0x007a5e}, // green
				{color:0xce1126}, // red
				{color:0xfcd116}], // yellow
				
			// cote d'ivoire
			ci: [{color:0xF77F00}, // orange
				{color:0xffffff}, // white
				{color:0x228b22}], // green
				
			// ghana
			gh: [{color:0xDa251d}, // red
				{color:0xFCD116}, // yellow
				{color:0x006b3f}, // green
				{color:0x191418}], // black

			// nigeria
			ng: [{color:0x008000}, // green
				{color:0xffffff}], // white
				
			// south africa
			za: [{color:0x008000}, // green
				{color:0xffd000}, // yellow
				{color:0xde3831}, // red
				{color:0x002395}, // blue
				{color:0xffffff}, // white
				{color:0x000000}], // black
				
			// honduras
			hn: [{color:0x00399c}, // blue
				{color:0xffffff}], // white
				
			// mexico
			mx: [{color:0x00aa55}, // green
				{color:0xffffff}, // white
				{color:0xff0000}, // red
				{color:0x000000}], // black
				
			// united states
			us: [{color:0xb70000}, // red
				{color:0xffffff}, // white
				{color:0x000040}], // blue
				
			// argentina
			ar: [{color:0xa3c6e7}, // blue
				{color:0xffffff}], // white
				
			// brazil
			br: [{color:0xbc9020}, // yellow
				{color:0x291770}, // blue
				{color:0x923f}], // green
				
			// chile
			cl: [{color:0x0039a6}, // blue
				{color:0xffffff}, // white
				{color:0xd52b1e}], // red
												
				
				
			// paraguay
			py: [{color:0x0039a6}, // blue
				{color:0xffffff}, // white
				{color:0xce1126}], // red
			
			// uraguay
			uy: [{color:0x0038a8}, // blue
				{color:0xffffff}, // white
				{color:0xcca300}], // yellow
				
			// new zealand
			nz: [{color:0x000000}, // black
				{color:0xffffff}, // white
				{color:0x00247d}, // blue
				{color:0xd33549}], // red
				
			// denmark
			dk: [{color:0xD00c33}, // red
				{color:0xffffff}], // white
				
			// england
			england: [{color:0xff0000}, // red
				{color:0xffffff}], // white
				
			// france
			fr: [{color:0x002395}, // blue
				{color:0xffffff}, // white
				{color:0xe92939}], // red
				
			// germany
			de: [{color:0x000000}, // black
				{color:0xdd0000}, // red
				{color:0xffce00}], // yellow
										
			// greece
			gr: [{color:0x000080}, // blue
				{color:0xffffff}], // white
																							

				
			// italy
			it: [{color:0x72b4ff}, // blue
				{color:0x00aa55}, // green
				{color:0xffffff}, // white
				{color:0xff0000}], // red
				
			// netherlands
			nl: [{color:0xff5f00}, // orange
				{color:0x000000}, // black
				{color:0xae1c28}, // red
				{color:0xffffff}, // white
				{color:0x21468b}], // blue
				
			// portugal
			pt: [{color:0xff0000}, // red
				{color:0x007f00}, // green
				{color:0xffffff}], // white
				
			// serbia
			rs: [{color:0xce1126}, // red
				{color:0x0039a6}, // blue
				{color:0xffffff}], // white
				
			// slovakia
			sk:  [{color:0xffffff}, // white
				{color:0x0039a6}, // blue
				{color:0xce1126}], // red
				
			// slovenia
			si: [{color:0x003f00}, // green
				{color:0xffffff}, // white
				{color:0x72b4ff}, // blue
				{color:0xed1c24}], // black
				
			// spain
			es: [{color:0xc60b1e}, // red
				{color:0xffc400}], // yellow
										
			// switzerland
			ch: [{color:0xff0000}, // red
				{color:0xffffff}], // white
			
			// canada
			ca: [{color:0xff0000}, // red
				{color:0xffffff}], // white
			
			// norway
			no: [{color:0xed1c24}, // red
				{color:0x0072bc}, // blue
				{color:0xffffff}], // white
			
			// colombia
			co: [{color:0xfff200}, // yellow
				{color:0x0072bc}, // blue
				{color:0xed1c24}], // red
				
			// equatorial guinea
			gq: [{color:0x3e9a00}, // green	
				{color:0xffffff}, // white
				{color:0xe32118}, // red	
				{color:0x0073ce}], // blue
			
			// sweden
			se: [{color:0x2a5caa}, // blue	
				{color:0xfff200}] // yellow
		};
		
		
		private static function GetPaletteColors(strTeamId:String): Array {
			var an:Array = [];
			for each (var obColor:Object in kobTeamColors[strTeamId]) 
				an.push(obColor.color);
			return an;
		}

		private static function GetColor(strTeamId:String,iSelectedColor:Number): Number {
			return kobTeamColors[strTeamId][iSelectedColor].color;
		}
		
		[Bindable] public function set team(t:String): void {
			_strTeamId = t;
		}
		
		public function get team():String {
			return _strTeamId;
		}
		
		private var _clrPrev:Number = NaN;
		
		private var _nID:Number = -1;
		private static var _nNextID:Number = 1;
		
		private function ctoa(clr:Number): String {
			if (isNaN(clr))
				return "[NaN]";
			return "[" + RGBColor.RedFromUint(clr) + ", " + RGBColor.GreenFromUint(clr) + ", " + RGBColor.BlueFromUint(clr) + "]";
		}
		
		private function Trace(str:String): void {
			if (_nID == -1)
				_nID = _nNextID++;
			trace( _nID + "|" + brushActive + "|" + _clrsw.selectedColorIndex + "|" + ctoa(_clrsw.color) + ": " + str);
		}
		
		[Bindable] public var opStrokes:OperationStrokes;

		override protected function InitController(): void {
			opStrokes = new OperationStrokes();
			_mctr = new PaintMaskController(opStrokes);
		}

		private function get currentOp(): ISimpleOperation {
			// whenever the color changes, create a new op with a new mask 
			var opNew:FacePaintImageOperation = new FacePaintImageOperation();
			opNew.Color = GetColor(team, _clrsw.selectedColorIndex);
			return opNew;
		}
		
		public override function OnOverlayPress(evt:MouseEvent): Boolean {
			this._nBrushHardness = 0;
			
			_mctr.erase = _brshbtn._btnEraser.selected;
			_mctr.additive = false;

			_mctr.brushAlpha = 1; // = brushAlpha
			
			_mctr.brushSpacing = 0.25;
			_mctr.extraStrokeParams = {strokeOperation:currentOp};
			return super.OnOverlayPress(evt);
		}
		
		override public function OnOverlayRelease():Boolean {
			return super.OnOverlayRelease();
		}
		
		private function OnColorClick(): void {
			if (_brshbtn) {
				_brshbtn.eraseMode = false;
			}
		}
						
	]]>
</mx:Script>
	
	<EffectButton id="_efbtn" strTitle="@Resource(key='_efbtn', bundle='SoccerFacePaintEffect')" strAuthor="@Resource(key='byPicnik', bundle='EffectCanvas')"
		strImageSource="../graphics/effects/soccerFever/facePaintSoccer.png" premium="{premium}"/>
	<mx:String id="_strHelpText">{Resource.getString('SoccerFacePaintEffect', '_strHelpText')}</mx:String>

	<mx:VBox x="10" y="73" verticalGap="0">
		<BlushColorPalette id="_clrsw" numSwatches="6" wet="true" 
				colors="{GetPaletteColors(team)}" click="OnColorClick()"
				selected="{_fSelected}"/> 
    
    	<!-- brush size / eraser toggle -->
    	<BrushSizeAndEraserButton id="_brshbtn" selected="{_fSelected}" paddingTop="2"
    		imageWidth="{origImageWidth}" imageHeight="{origImageHeight}"
    		 thumbPress="ShowBrushPreview()" thumbDrag="UpdateBrushPreview()" thumbRelease="HideBrushPreview()"
    		/>

		<!-- Fade label/percent/slider box -->
		<mx:HBox paddingBottom="-5" paddingTop="3" width="190">
			<mx:Label text="@Resource(key='fade', bundle='EffectCanvas')" styleName="sliderTitle"/>
			<mx:Label text="{LocUtil.pct((_sldrFade.value))}" styleName="sliderValue" textAlign="right" width="100%"/>
		</mx:HBox>
		<HSliderPlus width="190" minimum="0" maximum="100" value="{0 + zeroR}" id="_sldrFade" change="OnOpChange()" liveDragging="true" showDataTip="false"/>

		<ApplyCancelEffectButtons addBoxPadding="true" premium="{premium}"/>
	</mx:VBox>

	<mx:Number id="_cxyBrush">{_brshbtn.value}</mx:Number>
	<imageOperations:OperationStrokeImageOperation id="_op" strokes="{opStrokes}" BlendAlpha="{(1-_sldrFade.value/100)}"/>
</eff:PaintOnEffectBase>
